pipeline {
    agent any
    tools {
	    maven "MAVEN3"
	    jdk "OracleJDK11"
	}

    environment {
        registryCredential = 'dockerhub'
        registry = "mohammedbilal98/vproapp"
    }
  stages {
    
    stage('Build'){
      steps {
        sh 'mvn clean install -DskipTests'
      }
      post {
          success {
              echo 'Archiving....'
              archiveArtifacts artifacts: '**/target/*.war'
          }
      }
    }


    stage('Unit Test'){
      steps {
        sh 'mvn test'
      }
    }
   
    stage('Integration Test'){
      steps {
        sh 'mvn verify -DskipUnitTests'
      }
    }
    
    stage ('CODE ANALYSIS WITH CHECKSTYLE'){
      steps {
            sh 'mvn checkstyle:checkstyle'
      }
      post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

    stage('CODE ANALYSIS with SONARQUBE') {

            environment {
                scannerHome = tool 'mysonarscanner4'
            }

            steps {
                withSonarQubeEnv('sonar-pro') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }

                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

    stage('Building image') {
            steps{
              script {
                dockerImage = docker.build registry + ":$BUILD_NUMBER"
              }
            }
        }
        
    stage('Deploy Image') {
          steps{
            script {
              docker.withRegistry( '', registryCredential ) {
                dockerImage.push("$BUILD_NUMBER")
                
              }
            }
          }
        }

    stage('Remove Unused docker image') {
          steps{
            sh "docker rmi $registry:$BUILD_NUMBER"
          }
        }

   

  stage('Kubernetes Deploy') {
	  agent { label 'MINIKUBE' }
            steps {
                    sh "helm upgrade --install --force vproifle-stack helm/vprofilecharts --set appimage=${registry}:${BUILD_NUMBER} --namespace prod"
            }
        }
      
      

  }
}
